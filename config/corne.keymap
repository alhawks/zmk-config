/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUMBER 1
#define SYMBOL 2
#define NAVIGATE 3
#define FUNCTION 4
#define HYP LS(LC(LA(LGUI)))

/ {
        behaviors {
          hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
          };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | empty |  Q       |  W      |  E        |  R       |  T  |   |  Y       |  U         |  I      |  O      |  P  | empty |
// | empty |  A /cmd  |  S/alt  |  D/shift  |  F/ctrl  |  G  |   |  H/ctrl  |  J/shift   |  K/alt  |  L/cmd  |  '  | empty |
// | empty |  Z       |  X      |  C        |  V       |  B  |   |  N       |  M         |  ,      |  .      |  /  | empty |
//                              | GUI       | LWR      | SPC |   | ENT      | RSE        | ALT     |
                        bindings = <
   &none &kp Q      &kp W      &kp E        &kp R       &kp T              &kp Y       &kp U        &kp I      &kp O      &kp P    &none
   &none &hm LGUI A &hm LALT S &hm LSHIFT D &hm LCTRL F &kp G              &hm RCTRL H &hm RSHIFT J &hm RALT K &hm RGUI L &kp APOS &none
   &none &kp Z      &kp X      &kp C        &kp V       &kp B              &kp N       &kp M        &kp COMMA  &kp DOT    &kp FSLH &none
                        &ht_hp NAVIGATE ESC &kp LSHIFT  &ht_hp SYMBOL BSPC &ht_tp FUNCTION RET &ht_hp HYP SPACE  &ht_hp NUMBER TAB
                        >;
                };
                number_layer {
// -----------------------------------------------------------------------------------------
// |  empty  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | empty |
// |  empty  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | empty |
// |  empty  |     |     |     |  -  |  =  |   |     |  +  |     |     |     | empty |
//                       |     |     |     |   |     |     |     |
                        bindings = <
   &none &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT      &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR  &kp RPAR &none
   &none &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6    &kp N7    &kp N8          &kp N9    &kp N0   &none
   &none &trans       &trans       &trans       &kp MINUS    &kp EQUAL      &trans    &kp PLUS  &trans          &trans    &trans   &none
                          	        &kp LGUI     &trans       &kp SPACE      &kp RET   &trans    &kp RALT
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// | empty |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | empty |
// | empty |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  | empty |
// | empty |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" | empty |
//                     | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp EXCL &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
   &none &kp BSLH &kp COLON &kp SEMI  &kp GRAVE &kp TILDE   &kp PIPE  &kp LBRC &kp RBRC        &kp LBKT &kp RBKT &none
   &none &trans   &trans    &kp UNDER &kp MINUS &kp EQUAL   &trans    &kp PLUS &trans          &kp RBRC &kp PIPE &none
                    	        &kp LGUI  &trans    &kp SPACE   &kp RET   &trans   &kp RALT
                        >;
                };
        };
};

                navigate_layer {
// Save these bluetooth things for later:
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans

// -----------------------------------------------------------------------------------------
// | empty | PREV  | PLAY | NEXT |      |     |   |      |     |  UP |  9  |  0  | empty |
// | empty | LGUI  | VOLD | VOLU | MUTE |     |   | HOME | LFT | DWN | RGT |     | empty |
// | empty | BTCLR | BT1  | BT2  | BT3  | BT4 |   |      | END |     |     |     | empty |
//                        | GUI  |      | SPC |   | ENT  |     | ALT |
                        bindings = <
   &none &kp K_PREV &kp K_PLAY_PAUSE &kp K_NEXT       &trans   &trans         &trans   &kp PG_UP &kp UP   &trans    &trans &none
   &none &kp LGUI   &kp VOLD         &kp VOLU     &bt K_MUTE   &trans         &kp HOME &kp LEFT  &kp DOWN &kp RIGHT &trans &none
   &none &bt BT_CLR &bt BT_SEL 0     &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3   &trans   &kp END   &trans   &trans    &trans &none
                          	        &trans     &trans       &trans         &trans   &trans    &trans
                        >;
                };

                function_layer {
// -----------------------------------------------------------------------------------------
// | empty |     |     |     |     |     |   |     |     |     |     |     | empty |
// | empty | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 | empty |
// | empty | F11 | F12 | F13 | F14 | F15 |   | F16 | F17 | F18 | F19 | F20 | empty |
//                     | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &none
   &none &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &none
                          	        &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };
